// Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt v√† bi·∫øn c·∫•u h√¨nh
import { COOKIE } from "@/global/cookie";
import { NextRequest, NextResponse } from "next/server";
import { jwtVerify } from "jose";
import { CONFIG } from "./global/config";

// H√†m ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa token
const verifyToken = async (jwt: string) => {
  const secret = new TextEncoder().encode(CONFIG.JWT_SECRET);
  const nowInSec = Math.floor(Date.now() / 1000);
  try {
    const { payload } = await jwtVerify(jwt, secret, {
      algorithms: ["HS512"],
    });
    // N·∫øu token h·∫øt h·∫°n th√¨ tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá
    if (payload.exp && nowInSec > payload.exp)
      return { status: false, payload };
    return { status: true, payload };
  } catch {
    // N·∫øu l·ªói verify th√¨ coi nh∆∞ token kh√¥ng h·ª£p l·ªá
    return { status: false, payload: null };
  }
};

const refreshAccessToken = async (refreshToken: string | undefined) => {
  if (!refreshToken) {
    throw new Error("Refresh token failed");
  }

  const res = await fetch(
    `${CONFIG.API_GATEWAY.API_URL}${CONFIG.API_GATEWAY.API_VERSION}/auth/refresh-token`,
    {
      method: "POST",
      headers: {
        "X-API-KEY": CONFIG.X_API_KEY,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ refresh_token: refreshToken }),
      credentials: "include",
    }
  );

  if (!res.ok) {
    throw new Error("Refresh token failed");
  }

  const data = await res.json();
  return data.token;
};

export async function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname;

  // L·∫•y access token v√† refresh token t·ª´ cookie
  const token = request.cookies.get(COOKIE.access_token)?.value;
  const refreshToken = request.cookies.get(COOKIE.refresh_token)?.value;

  // X√°c ƒë·ªãnh xem request hi·ªán t·∫°i c√≥ ph·∫£i l√† auth page kh√¥ng
  const isAuthPage =
    pathname.startsWith("/auth") && pathname !== "/auth/verify-email";
  const isVerifyEmailPage = pathname === "/auth/verify-email";

  // Ki·ªÉm tra access token v√† refresh token
  const accessTokenValid = token
    ? await verifyToken(token)
    : { status: false, payload: null };
  const refreshTokenValid = refreshToken
    ? await verifyToken(refreshToken)
    : { status: false, payload: null };

  // Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c email hay ch∆∞a
  const isVerified =
    accessTokenValid.payload?.is_verified ||
    refreshTokenValid.payload?.is_verified;

  // ‚ùå B·ªè qua middleware n·∫øu l√† route x√°c th·ª±c email qua token: /auth/verify-email/[token]
  if (!isVerified) {
    if (
      pathname.startsWith("/auth/verify-email/") &&
      pathname !== "/auth/verify-email"
    ) {
      return NextResponse.next();
    }
  }

  // üëâ Tr∆∞·ªùng h·ª£p ng∆∞·ªùi d√πng ƒëang truy c·∫≠p v√†o c√°c trang /auth/* (ngo·∫°i tr·ª´ /verify-email)
  if (isAuthPage) {
    // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p th√¨ redirect v·ªÅ trang ch·ªß
    if (accessTokenValid.status) {
      return NextResponse.redirect(new URL("/", request.url));
    }
    // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p th√¨ cho ph√©p v√†o trang /auth/*
    return NextResponse.next();
  }

  // üëâ Tr∆∞·ªùng h·ª£p ng∆∞·ªùi d√πng truy c·∫≠p trang x√°c th·ª±c email
  if (isVerifyEmailPage) {
    // N·∫øu ƒë√£ x√°c th·ª±c email r·ªìi th√¨ redirect v·ªÅ trang ch·ªß
    if (isVerified) {
      return NextResponse.redirect(new URL("/", request.url));
    }

    if (
      pathname.startsWith("/auth/verify-email/") &&
      pathname !== "/auth/verify-email"
    ) {
      return NextResponse.next();
    }

    // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p th√¨ redirect v·ªÅ trang ƒëƒÉng nh·∫≠p
    if (!accessTokenValid.status && !refreshTokenValid.status) {
      return NextResponse.redirect(new URL("/auth/signin", request.url));
    }

    // N·∫øu c√≥ token h·ª£p l·ªá v√† ch∆∞a x√°c th·ª±c ‚Üí cho ph√©p truy c·∫≠p verify-email
    return NextResponse.next();
  }

  // üëâ Tr∆∞·ªùng h·ª£p truy c·∫≠p c√°c route kh√°c (v√≠ d·ª• "/")
  if (!accessTokenValid.status) {
    // N·∫øu kh√¥ng c√≥ refresh token h·ª£p l·ªá th√¨ redirect v·ªÅ trang ƒëƒÉng nh·∫≠p
    if (!refreshTokenValid.status) {
      return NextResponse.redirect(new URL("/auth/signin", request.url));
    }

    // N·∫øu refresh token h·ª£p l·ªá, g·ªçi API refresh token ƒë·ªÉ l·∫•y access token m·ªõi
    try {
      const newAccessToken = await refreshAccessToken(refreshToken);

      // Sau khi c√≥ access token m·ªõi, t·∫°o l·∫°i cookie v√† ti·∫øp t·ª•c request
      const response = NextResponse.next();
      response.cookies.set(COOKIE.access_token, newAccessToken, {
        httpOnly: true,
        path: "/",
      });
      return response;
    } catch (error) {
      console.error("Refresh token failed", error);
      return NextResponse.redirect(new URL("/auth/signin", request.url));
    }
  }

  // N·∫øu ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c email ‚Üí redirect v·ªÅ verify-email
  if (!isVerified) {
    return NextResponse.redirect(new URL("/auth/verify-email", request.url));
  }

  // N·∫øu t·∫•t c·∫£ ƒë·ªÅu h·ª£p l·ªá ‚Üí cho ph√©p truy c·∫≠p
  return NextResponse.next();
}

// √Åp d·ª•ng middleware cho c√°c route c·∫ßn ki·ªÉm so√°t
export const config = {
  matcher: ["/", "/auth/:path*"],
};
