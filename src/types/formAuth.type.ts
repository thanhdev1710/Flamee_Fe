import { z } from "zod";

// Schema chung
export const authSchema = z
  .object({
    type: z.enum(["signin", "signup", "send-reset-password", "reset-password"]),
    email: z.string().optional(),
    password: z.string().optional(),
    rememberMe: z.boolean().optional(),
    confirmPassword: z.string().optional(),
    confirmPolicy: z.boolean().optional(),
  })
  .superRefine((data, ctx) => {
    const { type, email, password, confirmPassword, confirmPolicy } = data;

    // üéØ C√°c lo·∫°i c·∫ßn email
    if (["signin", "signup", "send-reset-password"].includes(type)) {
      if (!email || email.trim() === "") {
        ctx.addIssue({
          path: ["email"],
          message: "Vui l√≤ng nh·∫≠p email",
          code: z.ZodIssueCode.custom,
        });
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        ctx.addIssue({
          path: ["email"],
          message: "Email kh√¥ng h·ª£p l·ªá",
          code: z.ZodIssueCode.custom,
        });
      }
    }

    // üéØ C√°c lo·∫°i c·∫ßn password
    if (["signin", "signup", "reset-password"].includes(type)) {
      if (!password || password.length < 13) {
        ctx.addIssue({
          path: ["password"],
          message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng",
          code: z.ZodIssueCode.custom,
        });
      } else {
        if (!/[a-z]/.test(password))
          ctx.addIssue({
            path: ["password"],
            message: "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng",
            code: z.ZodIssueCode.custom,
          });
        if (!/[A-Z]/.test(password))
          ctx.addIssue({
            path: ["password"],
            message: "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa",
            code: z.ZodIssueCode.custom,
          });
        if (!/[0-9]/.test(password))
          ctx.addIssue({
            path: ["password"],
            message: "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 s·ªë",
            code: z.ZodIssueCode.custom,
          });
        if (!/[!@#\$%\^&\*\(\)_\+\-=\[\]{};':"\\|,.<>\/?]/.test(password))
          ctx.addIssue({
            path: ["password"],
            message: "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát",
            code: z.ZodIssueCode.custom,
          });
      }
    }

    // üéØ Signup c·∫ßn x√°c nh·∫≠n m·∫≠t kh·∫©u v√† ch√≠nh s√°ch
    if (type === "signup") {
      if (!confirmPassword) {
        ctx.addIssue({
          path: ["confirmPassword"],
          message: "Vui l√≤ng nh·∫≠p x√°c nh·∫≠n m·∫≠t kh·∫©u",
          code: z.ZodIssueCode.custom,
        });
      } else if (password !== confirmPassword) {
        ctx.addIssue({
          path: ["confirmPassword"],
          message: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp",
          code: z.ZodIssueCode.custom,
        });
      }

      if (!confirmPolicy) {
        ctx.addIssue({
          path: ["confirmPolicy"],
          message: "B·∫°n ph·∫£i ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n",
          code: z.ZodIssueCode.custom,
        });
      }
    }

    // üéØ reset-password c≈©ng c·∫ßn x√°c nh·∫≠n m·∫≠t kh·∫©u
    if (type === "reset-password") {
      if (!confirmPassword) {
        ctx.addIssue({
          path: ["confirmPassword"],
          message: "Vui l√≤ng nh·∫≠p x√°c nh·∫≠n m·∫≠t kh·∫©u",
          code: z.ZodIssueCode.custom,
        });
      } else if (password !== confirmPassword) {
        ctx.addIssue({
          path: ["confirmPassword"],
          message: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp",
          code: z.ZodIssueCode.custom,
        });
      }
    }
  });

export type AuthFormData = z.infer<typeof authSchema>;

export type FormType =
  | "signin"
  | "signup"
  | "send-reset-password"
  | "reset-password";

export const checkPasswordStrength = (password: string) => {
  let strength = 0;
  const role: string[] = [];

  // Ki·ªÉm tra chi·ªÅu d√†i m·∫≠t kh·∫©u
  if (password.length >= 13) {
    role.push("length");
    strength++;
  }

  // Ki·ªÉm tra ch·ªØ th∆∞·ªùng
  if (/[a-z]/.test(password)) {
    role.push("lowercase");
    strength++;
  }

  // Ki·ªÉm tra ch·ªØ hoa
  if (/[A-Z]/.test(password)) {
    role.push("uppercase");
    strength++;
  }

  // Ki·ªÉm tra s·ªë
  if (/[0-9]/.test(password)) {
    role.push("number");
    strength++;
  }

  // Ki·ªÉm tra k√Ω t·ª± ƒë·∫∑c bi·ªát
  if (/[!@#\$%\^&\*\(\)_\+\-=\[\]{};':"\\|,.<>\/?]/.test(password)) {
    role.push("special");
    strength++;
  }

  return { strength, role };
};
